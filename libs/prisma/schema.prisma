// Generator for prisma client, for use in the nestjs API
generator client {
  provider = "prisma-client-js"
}

// Generator for graphql interactions with nestjs API
generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "@graphql"
}

// Nest DTO types
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "@nestdto"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
}

// NestJS Swagger API Docs
generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "@nestjsclasses"
  dryRun   = false
}

// The connection to the database itself
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model ClockifyTimer {
  projectId String @unique
  startTime String
  id        Int    @id @default(autoincrement())

  @@index([id])
}

model DiscordUserSetting {
  userId String @id @unique
  meta   Json
}

model Gallery {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  slug        String            @unique
  meta        String
  description String
  visibility  Visibility        @default(PUBLIC)
  isNsfw      Boolean           @default(false)
  image       String
  categories  GalleryCategory[]
  tags        GalleryTag[]
  images      GalleryImage[]

  @@index([id, slug])
}

model GalleryCategory {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  galleryId Int?
  Gallery   Gallery? @relation(fields: [galleryId], references: [id])

  @@index([id, slug])
}

model GalleryImage {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  slug        String            @unique
  published   PublicationStatus
  publishedAt DateTime
  visibility  Visibility?
  url         String
  galleries   Gallery[]

  @@index([id, slug])
}

model GalleryTag {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  galleryId Int?
  Gallery   Gallery? @relation(fields: [galleryId], references: [id])

  @@index([id, slug])
}

model Marker {
  id         Int     @id @default(autoincrement())
  lat        Decimal
  lon        Decimal
  siteURL    String?
  galleryURL String?
  title      String
  rating     Int     @default(0)
  visited    Boolean @default(false)
  visits     Int     @default(0)

  @@index([id])
}

model MinecraftRule {
  id          Int                   @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  categoryId  Int
  category    MinecraftRuleCategory @relation(fields: [categoryId], references: [id])

  @@index([id])
}

model MinecraftRuleCategory {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  icon           String
  MinecraftRules MinecraftRule[]

  @@index([id])
}

model Page {
  id             Int      @id @default(autoincrement())
  title          String
  slug           String   @unique
  summary        String
  content        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  featuredImage  Image?   @relation(fields: [imagePublic_id], references: [public_id])
  imagePublic_id String?
  isPublic       Boolean

  @@index([id])
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  metaTitle      String
  slug           String       @unique
  summary        String
  wordCount      Int          @default(0)
  published      Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  publishedAt    DateTime?
  content        String
  imagePublic_id String?
  postCategoryId Int
  featuredImage  Image?       @relation(fields: [imagePublic_id], references: [public_id])
  category       PostCategory @relation(fields: [postCategoryId], references: [id])
  tags           PostTag[]

  @@index([id])
}

model PostCategory {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  title String
  posts Post[]

  @@index([id, slug])
}

model PostTag {
  id     Int    @id @default(autoincrement())
  postId Int?
  slug   String @unique
  title  String
  posts  Post[]

  @@index([id, slug])
}

model Image {
  id        Int      @default(autoincrement())
  public_id String   @id @unique
  version   Int?
  format    String?
  url       String?
  secureUrl String?
  alt       String?
  caption   String?
  width     Int?
  height    Int?
  bytes     Int?
  createdAt DateTime @default(now())
  thumbnail String?
  exif      Json?
  updatedAt DateTime @updatedAt
  Post      Post[]
  Page      Page[]

  @@index([id, public_id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum PublicationStatus {
  PUBLISHED
  DRAFT
}

enum Visibility {
  PUBLIC
  PROTECTED
  PRIVATE
}
