generator client {
  provider = "prisma-client-js"
}

//generator trpc {
//  provider      = "prisma-trpc-generator"
//  withMiddlware = false
//  withShield    = false
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublicationStatus {
  PUBLISHED
  DRAFT
}

enum Visibility {
  PUBLIC
  PROTECTED
  PRIVATE
}

model ArticleTag {
  id       Int       @id @default(autoincrement())
  title    String
  slug     String    @unique
  articles Article[]

  @@index([id, slug])
}

model Article {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  title          String
  slug           String            @unique
  content        String            @db.Text
  tags           ArticleTag[]
  seo_title      String
  seo_excerpt    String            @db.Text
  featured_image String
  published      PublicationStatus @default(DRAFT)
  publishedAt    DateTime?
}

model ClockifyTimer {
  projectId String @unique
  startTime String
  id        Int    @id @default(autoincrement())

  @@index([id])
}

model DiscordUserSetting {
  userId String @id @unique
  meta   Json
}

model Gallery {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  slug        String            @unique
  meta        String            @db.Text
  description String            @db.Text
  visibility  Visibility        @default(PUBLIC)
  isNsfw      Boolean           @default(false)
  image       String
  categories  GalleryCategory[]
  tags        GalleryTag[]
  images      GalleryImage[]

  @@index([id, slug])
}

model GalleryCategory {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  Gallery   Gallery? @relation(fields: [galleryId], references: [id])
  galleryId Int?

  @@index([id, slug])
}

model GalleryImage {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  slug        String            @unique
  galleries   Gallery[]
  published   PublicationStatus
  publishedAt DateTime
  visibility  Visibility?
  url         String

  @@index([id, slug])
}

model GalleryTag {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  Gallery   Gallery? @relation(fields: [galleryId], references: [id])
  galleryId Int?

  @@index([id, slug])
}

model Marker {
  id         Int     @id @default(autoincrement())
  lat        Decimal
  lon        Decimal
  siteURL    String?
  galleryURL String?
  title      String
  rating     Int     @default(0)
  visited    Boolean @default(false)
  visits     Int     @default(0)

  @@index([id])
}

model MinecraftRule {
  id          Int                   @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  categoryId  Int
  category    MinecraftRuleCategory @relation(fields: [categoryId], references: [id])

  @@index([id])
}

model MinecraftRuleCategory {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  icon           String
  MinecraftRules MinecraftRule[]

  @@index([id])
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  metaTitle      String
  slug           String       @unique
  summary        String
  published      Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  publishedAt    DateTime
  content        String
  featuredImage  Image        @relation(fields: [imagePublic_id], references: [public_id])
  imagePublic_id String
  category       PostCategory @relation(fields: [postCategoryId], references: [id])
  postCategoryId Int
  tags           PostTag[]

  @@index([id])
}

model PostCategory {
  id    Int    @id @default(autoincrement())
  Post  Post[]
  title String @unique
  slug  String
}

model PostTag {
  id     Int    @id @default(autoincrement())
  Post   Post?  @relation(fields: [postId], references: [id])
  postId Int?
  title  String @unique
  slug   String
}

model Image {
  public_id String   @id @unique
  version   Int?
  format    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bytes     Int?
  url       String?
  secureUrl String?
  base64    String?
  thumbnail String?
  Post      Post[]
  alt       String?
  caption   String?
  width     Int?
  height    Int?
  exif      Json?

  @@index([public_id])
}
